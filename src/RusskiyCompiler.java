/* RusskiyCompiler.java */
/* Generated By:JavaCC: Do not edit this line. RusskiyCompiler.java */
public class RusskiyCompiler implements RusskiyCompilerConstants {
  public static void main(String args[]) throws ParseException {
    RusskiyCompiler parser = new RusskiyCompiler(System.in);
    while (true) {
      System.out.println("Nachalo");
      System.out.println("Digite sua frase e vamos ver se at\u00e9 Dostoi\u00e9vski aprovaria.");
      try {
        parser.Programa(); // corrigido: chama a gramática
        System.out.println("\u2714 C\u00f3digo aceito com sucesso!");
      } catch (Exception e) {
        System.out.println("Frase inv\u00e1lida! Stalin n\u00e3o aprovaria essa sintaxe.");
        System.out.println("Detalhes: " + e.getMessage());
        parser.ReInit(System.in); // corrigido: reinit no parser criado
      } catch (Error e) {
        System.out.println("Esse comando \u00e9 t\u00e3o pesado que nem o Kremlin processa.");
        System.out.println("Mensagem: " + e.getMessage());
        break;
      }
    }
  }

  // =============================
  // Gramática
  // =============================
  final public void Programa() throws ParseException {
    label_1: while (true) {
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case VOID:
        case INT:
        case FLOAT:
        case IF:
        case WHILE:
        case IDENTIFIER:
        case NUMBER:
        case LPAREN: {
          ;
          break;
        }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
      }
      Comando();
    }
    jj_consume_token(0);
  }

  final public void Comando() throws ParseException {
    switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
      case IF: {
        Condicional();
        break;
      }
      case WHILE: {
        Iteracao();
        break;
      }
      case IDENTIFIER:
      case NUMBER:
      case LPAREN: {
        FraseFinalizada();
        break;
      }
      case VOID:
      case INT:
      case FLOAT: {
        Declaracao();
        break;
      }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
    }
  }

  final public void FraseFinalizada() throws ParseException {
    Frase();
    jj_consume_token(SEMICOLON);
  }

  final public void Frase() throws ParseException {
    switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
      case IDENTIFIER: {
        Atribuicao();
        break;
      } {
        Identificador();
        break;
      }
      case NUMBER:
      case LPAREN: {
        Expressao();
        break;
      }
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
    }
  }

  final public void Expressao() throws ParseException {
    Termo();
    label_2: while (true) {
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case PLUS:
        case MINUS:
        case MULT:
        case DIV:
        case POW:
        case DIVINT:
        case MOD: {
          ;
          break;
        }
        default:
          jj_la1[3] = jj_gen;
          break label_2;
      }
      OperadorBinario();
      Termo();
    }
  }

  final public void Termo() throws ParseException {
    switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
      case IDENTIFIER: {
        Identificador();
        break;
      }
      case NUMBER: {
        Numero();
        break;
      }
      case LPAREN: {
        jj_consume_token(LPAREN);
        Expressao();
        jj_consume_token(RPAREN);
        break;
      }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
    }
  }

  final public void OperadorBinario() throws ParseException {
    switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
      case PLUS: {
        jj_consume_token(PLUS);
        break;
      }
      case MINUS: {
        jj_consume_token(MINUS);
        break;
      }
      case MULT: {
        jj_consume_token(MULT);
        break;
      }
      case DIV: {
        jj_consume_token(DIV);
        break;
      }
      case MOD: {
        jj_consume_token(MOD);
        break;
      }
      case POW: {
        jj_consume_token(POW);
        break;
      }
      case DIVINT: {
        jj_consume_token(DIVINT);
        break;
      }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
    }
  }

  final public void Identificador() throws ParseException {
    jj_consume_token(IDENTIFIER);
  }

  final public void Numero() throws ParseException {
    jj_consume_token(NUMBER);
  }

  final public void Atribuicao() throws ParseException {
    Identificador();
    jj_consume_token(ASSIGN);
    Expressao();
  }

  final public void Condicional() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(LPAREN);
    Expressao();
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
    label_3: while (true) {
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case VOID:
        case INT:
        case FLOAT:
        case IF:
        case WHILE:
        case IDENTIFIER:
        case NUMBER:
        case LPAREN: {
          ;
          break;
        }
        default:
          jj_la1[6] = jj_gen;
          break label_3;
      }
      Comando();
    }
    jj_consume_token(RBRACE);
    switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
      case ELSE: {
        jj_consume_token(ELSE);
        jj_consume_token(LBRACE);
        label_4: while (true) {
          switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case VOID:
            case INT:
            case FLOAT:
            case IF:
            case WHILE:
            case IDENTIFIER:
            case NUMBER:
            case LPAREN: {
              ;
              break;
            }
            default:
              jj_la1[7] = jj_gen;
              break label_4;
          }
          Comando();
        }
        jj_consume_token(RBRACE);
        break;
      }
      default:
        jj_la1[8] = jj_gen;
        ;
    }
  }

  final public void Iteracao() throws ParseException {
    jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
    Expressao();
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
    label_5: while (true) {
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case VOID:
        case INT:
        case FLOAT:
        case IF:
        case WHILE:
        case IDENTIFIER:
        case NUMBER:
        case LPAREN: {
          ;
          break;
        }
        default:
          jj_la1[9] = jj_gen;
          break label_5;
      }
      Comando();
    }
    jj_consume_token(RBRACE);
  }

  final public void OperadorIncdec() throws ParseException {
    switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
      case 31: {
        jj_consume_token(31);
        break;
      }
      case 32: {
        jj_consume_token(32);
        break;
      }
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
    }
  }

  final public void Declaracao() throws ParseException {
    TipoEspecificador();
    Identificador();
    OpcionalInicializacao();
    jj_consume_token(SEMICOLON);
  }

  final public void OpcionalInicializacao() throws ParseException {
    switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
      case ASSIGN: {
        jj_consume_token(ASSIGN);
        Expressao();
        break;
      }
      default:
        jj_la1[11] = jj_gen;
        ;
    }
  }

  final public void TipoEspecificador() throws ParseException {
    switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
      case VOID: {
        jj_consume_token(VOID);
        break;
      }
      case INT: {
        jj_consume_token(INT);
        break;
      }
      case FLOAT: {
        jj_consume_token(FLOAT);
        break;
      }
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
    }
  }

  /** Generated Token Manager. */
  public RusskiyCompilerTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[13];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
    jj_la1_init_0();
    jj_la1_init_1();
  }

  private static void jj_la1_init_0() {
    jj_la1_0 = new int[] { 0x20325c0, 0x20325c0, 0x2030000, 0x1fc0000, 0x2030000, 0x1fc0000, 0x20325c0, 0x20325c0,
        0x800, 0x20325c0, 0x80000000, 0x40000000, 0x1c0, };
  }

  private static void jj_la1_init_1() {
    jj_la1_1 = new int[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, };
  }

  /** Constructor with InputStream. */
  public RusskiyCompiler(java.io.InputStream stream) {
    this(stream, null);
  }

  /** Constructor with InputStream and supplied encoding */
  public RusskiyCompiler(java.io.InputStream stream, String encoding) {
    try {
      jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
    } catch (java.io.UnsupportedEncodingException e) {
      throw new RuntimeException(e);
    }
    token_source = new RusskiyCompilerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++)
      jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
    ReInit(stream, null);
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try {
      jj_input_stream.ReInit(stream, encoding, 1, 1);
    } catch (java.io.UnsupportedEncodingException e) {
      throw new RuntimeException(e);
    }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++)
      jj_la1[i] = -1;
  }

  /** Constructor. */
  public RusskiyCompiler(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new RusskiyCompilerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++)
      jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    if (jj_input_stream == null) {
      jj_input_stream = new SimpleCharStream(stream, 1, 1);
    } else {
      jj_input_stream.ReInit(stream, 1, 1);
    }
    if (token_source == null) {
      token_source = new RusskiyCompilerTokenManager(jj_input_stream);
    }

    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++)
      jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public RusskiyCompiler(RusskiyCompilerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++)
      jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(RusskiyCompilerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++)
      jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null)
      token = token.next;
    else
      token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  /** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null)
      token = token.next;
    else
      token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  /** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null)
        t = t.next;
      else
        t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt = token.next) == null)
      return (jj_ntk = (token.next = token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[33];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 13; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1 << j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1 << j)) != 0) {
            la1tokens[32 + j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 33; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

  /** Trace enabled. */
  final public boolean trace_enabled() {
    return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
