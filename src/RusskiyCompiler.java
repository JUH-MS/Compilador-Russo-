/* RusskiyCompiler.java */
/* Generated By:JavaCC: Do not edit this line. RusskiyCompiler.java */
public class RusskiyCompiler implements RusskiyCompilerConstants {
    public static void main(String args[]) throws Exception {
        RusskiyCompiler parser = new RusskiyCompiler(System.in);
        boolean rodando = true;

        while (rodando) {
            System.out.println("Nachalo");
            System.out.println("Digite sua frase e vamos ver se at\u00e9 Dostoi\u00e9vski aprovaria.");
            try {
                parser.Programa();
                System.out.println("\u2714 C\u00f3digo aceito com sucesso!");
            } catch (ParseException e) {
                System.out.println("Frase inv\u00e1lida! Stalin n\u00e3o aprovaria essa sintaxe.");
                System.out.println("Detalhes: " + e.getMessage());
                parser.ReInit(System.in);
            } catch (TokenMgrError e) {
                System.out.println("Erro l\u00e9xico: caractere inv\u00e1lido.");
                System.out.println("Mensagem: " + e.getMessage());
                parser.ReInit(System.in);
            } catch (Exception e) {
                System.out.println("Erro inesperado.");
                System.out.println("Mensagem: " + e.getMessage());
                rodando = false;
            }
        }
    }

  final public void Programa() throws ParseException {
    Vvod();
    jj_consume_token(0);
}

  final public void Vvod() throws ParseException {
    ListaDeDeclaracoes();
    ListaDeComandos();
}

  final public void ListaDeDeclaracoes() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VOID:
      case INT:
      case FLOAT:
      case STRING_TYPE:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      Declaracao();
    }
}

  final public void ListaDeComandos() throws ParseException {
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STRING_VALUE:
      case IF:
      case ELSE:
      case FOR:
      case WHILE:
      case PRINT:
      case IDENTIFIER:
      case NUMBER:
      case LPAREN:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      Comando();
    }
}

  final public void Declaracao() throws ParseException {
    TipoEspecificador();
    Identificador();
    OpcionalInicializacao();
    jj_consume_token(SEMICOLON);
}

  final public void OpcionalInicializacao() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ASSIGN:{
      jj_consume_token(ASSIGN);
      Expressao();
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      ;
    }
}

  final public void TipoEspecificador() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VOID:{
      jj_consume_token(VOID);
      break;
      }
    case INT:{
      jj_consume_token(INT);
      break;
      }
    case FLOAT:{
      jj_consume_token(FLOAT);
      break;
      }
    case STRING_TYPE:{
      jj_consume_token(STRING_TYPE);
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void Comando() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IF:
    case ELSE:{
      Condicional();
      break;
      }
    case FOR:
    case WHILE:{
      Iteracao();
      break;
      }
    case STRING_VALUE:
    case IDENTIFIER:
    case NUMBER:
    case LPAREN:{
      FraseFinalizada();
      break;
      }
    case PRINT:{
      Vyvod();
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void Condicional() throws ParseException {
    if (jj_2_1(2)) {
      jj_consume_token(IF);
      jj_consume_token(LPAREN);
      Frase();
      jj_consume_token(RPAREN);
      jj_consume_token(LBRACE);
      ListaDeComandos();
      jj_consume_token(RBRACE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ELSE:{
        jj_consume_token(ELSE);
        jj_consume_token(LBRACE);
        ListaDeComandos();
        jj_consume_token(RBRACE);
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        ;
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ELSE:{
        jj_consume_token(ELSE);
        jj_consume_token(LBRACE);
        ListaDeComandos();
        jj_consume_token(RBRACE);
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

  final public void Iteracao() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case WHILE:{
      jj_consume_token(WHILE);
      jj_consume_token(LPAREN);
      Frase();
      jj_consume_token(RPAREN);
      jj_consume_token(LBRACE);
      ListaDeComandos();
      jj_consume_token(RBRACE);
      break;
      }
    case FOR:{
      jj_consume_token(FOR);
      jj_consume_token(LPAREN);
      Frase();
      jj_consume_token(SEMICOLON);
      Frase();
      jj_consume_token(SEMICOLON);
      Frase();
      jj_consume_token(RPAREN);
      jj_consume_token(LBRACE);
      ListaDeComandos();
      jj_consume_token(RBRACE);
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void FraseFinalizada() throws ParseException {
    if (jj_2_2(2)) {
      Frase();
      jj_consume_token(SEMICOLON);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STRING_VALUE:
      case IDENTIFIER:
      case NUMBER:
      case LPAREN:{
        Frase();
System.out.println("Meu camarada Russo, um programa sem ';' \u00e9 como uma vodka pela metade, n\u00e3o acabou.");
        while (getToken(1).kind != SEMICOLON &&
               getToken(1).kind != RBRACE &&
               getToken(1).kind != 0) {
            getNextToken();
        }
        if (getToken(1).kind == SEMICOLON) {
            getNextToken();
        }
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

  final public void Frase() throws ParseException {
    if (jj_2_3(3)) {
      Atribuicao();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STRING_VALUE:
      case IDENTIFIER:
      case NUMBER:
      case LPAREN:{
        Termo();
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

  final public void Atribuicao() throws ParseException {
    if (jj_2_4(3)) {
      Identificador();
      jj_consume_token(ASSIGN);
      Expressao();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        Identificador();
        OperadorIncdec();
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

  final public void Expressao() throws ParseException {
    Termo();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case E:
      case OU:
      case PLUS:
      case MINUS:
      case MULT:
      case DIV:
      case POW:
      case MOD:{
        ;
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        break label_3;
      }
      OperadorBinario();
      Termo();
    }
}

  final public void Termo() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      Identificador();
      break;
      }
    case NUMBER:{
      Numero();
      break;
      }
    case STRING_VALUE:{
      jj_consume_token(STRING_VALUE);
      break;
      }
    case LPAREN:{
      jj_consume_token(LPAREN);
      Expressao();
      jj_consume_token(RPAREN);
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void OperadorBinario() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PLUS:{
      jj_consume_token(PLUS);
      break;
      }
    case MINUS:{
      jj_consume_token(MINUS);
      break;
      }
    case MULT:{
      jj_consume_token(MULT);
      break;
      }
    case DIV:{
      jj_consume_token(DIV);
      break;
      }
    case MOD:{
      jj_consume_token(MOD);
      break;
      }
    case POW:{
      jj_consume_token(POW);
      break;
      }
    case E:{
      jj_consume_token(E);
      break;
      }
    case OU:{
      jj_consume_token(OU);
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void Identificador() throws ParseException {
    jj_consume_token(IDENTIFIER);
}

  final public void Numero() throws ParseException {
    jj_consume_token(NUMBER);
}

  final public void OperadorIncdec() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INC:{
      jj_consume_token(INC);
      break;
      }
    case DEC:{
      jj_consume_token(DEC);
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void Vyvod() throws ParseException {
    jj_consume_token(PRINT);
    jj_consume_token(LPAREN);
    ListaDeArgumentos();
    jj_consume_token(RPAREN);
    jj_consume_token(SEMICOLON);
System.out.println("\u2714 Comando de sa\u00edda reconhecido com sucesso!");
}

  final public void ListaDeArgumentos() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      jj_consume_token(IDENTIFIER);
      break;
      }
    case NUMBER:{
      jj_consume_token(NUMBER);
      break;
      }
    case STRING_VALUE:{
      jj_consume_token(STRING_VALUE);
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        jj_consume_token(IDENTIFIER);
        break;
        }
      case NUMBER:{
        jj_consume_token(NUMBER);
        break;
        }
      case STRING_VALUE:{
        jj_consume_token(STRING_VALUE);
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

  final public void Funktsyia() throws ParseException {
    Identificador();
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      jj_consume_token(IDENTIFIER);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[18] = jj_gen;
          break label_5;
        }
        jj_consume_token(COMMA);
        jj_consume_token(IDENTIFIER);
      }
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
    ListaDeComandos();
    jj_consume_token(RBRACE);
}

  final public void Pusto() throws ParseException {
    Funktsyia();
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_3R_Termo_175_7_13()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_Expressao_167_5_8()) return true;
    return false;
  }

  private boolean jj_3R_Termo_172_7_11()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_3R_Termo_175_7_13()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_Expressao_167_5_8()
 {
    if (jj_3R_Termo_172_7_11()) return true;
    return false;
  }

  private boolean jj_3R_Atribuicao_163_5_10()
 {
    if (jj_scan_token(19)) return true;
    if (jj_3R_OperadorIncdec_202_7_12()) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_Frase_156_5_6()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_scan_token(19)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_Expressao_167_5_8()) return true;
    return false;
  }

  private boolean jj_3R_Atribuicao_161_5_7()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_Atribuicao_163_5_10()) return true;
    }
    return false;
  }

  private boolean jj_3R_OperadorIncdec_202_7_12()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) return true;
    }
    return false;
  }

  private boolean jj_3R_Frase_157_5_9()
 {
    if (jj_3R_Termo_172_7_11()) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_Atribuicao_161_5_7()) return true;
    return false;
  }

  private boolean jj_3R_Frase_156_5_6()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_Frase_157_5_9()) return true;
    }
    return false;
  }

  /** Generated Token Manager. */
  public RusskiyCompilerTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[20];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x3c0,0x4018fc00,0x0,0x3c0,0x4018fc00,0x1000,0x1000,0x6000,0x40180400,0x40180400,0x80000,0x3aa60000,0x40180400,0x3aa60000,0x1400000,0x180400,0x0,0x180400,0x0,0x80000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x2,0x0,};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[4];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public RusskiyCompiler(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public RusskiyCompiler(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new RusskiyCompilerTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 20; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 20; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public RusskiyCompiler(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new RusskiyCompilerTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 20; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new RusskiyCompilerTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 20; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public RusskiyCompiler(RusskiyCompilerTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 20; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(RusskiyCompilerTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 20; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[38];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 20; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 38; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 4; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
