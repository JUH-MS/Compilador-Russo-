options {
    STATIC = false;
}

PARSER_BEGIN(RusskiyCompiler)
public class RusskiyCompiler {
    public static void main(String args[]) throws Exception {
        RusskiyCompiler parser = new RusskiyCompiler(System.in);
        while (true) {
            System.out.println("Nachalo");
            System.out.println("Digite sua frase e vamos ver se até Dostoiévski aprovaria.");
            try {
                parser.Programa(); // chama a gramática
                System.out.println("✔ Código aceito com sucesso!");
            } catch (ParseException e) {
                System.out.println("Frase inválida! Stalin não aprovaria essa sintaxe.");
                System.out.println("Detalhes: " + e.getMessage());
                parser.ReInit(System.in);
            } catch (TokenMgrError e) {
                System.out.println("Erro léxico: caractere inválido.");
                System.out.println("Mensagem: " + e.getMessage());
                parser.ReInit(System.in);
            } catch (Error e) {
                System.out.println("Esse comando é tão pesado que nem o Kremlin processa.");
                System.out.println("Mensagem: " + e.getMessage());
                break;
            }
        }
    }
}
PARSER_END(RusskiyCompiler)

SKIP : {
    " " | "\t" | "\n" | "\r"
}

MORE : {
    < "#" (~["\n","\r"])* > : DEFAULT
}

TOKEN : {
    < VOID          : "pusto"               >
  | < INT           : "tseloye"             >
  | < FLOAT         : "drobnoye"            >
  | < STRING_TYPE   : "slova"               >   
  | < STRING_VALUE  : "\"" (~["\""])* "\""  >   

  | < IF            : "yesli"               >
  | < ELSE          : "inache"              >
  | < FOR           : "kazhday"             >
  | < WHILE         : "poka"                >
  | < PRINT         : "vyvod"               >
  | < INPUT         : "vvod"                >

  | < IDENTIFIER    : (["a"-"z","A"-"Z"])+  >
  | < NUMBER        : (["0"-"9"])+          >

  | < PLUS          : "+"                   >
  | < INC           : "++"                  >
  | < MINUS         : "-"                   >
  | < DEC           : "--"                  >
  | < MULT          : "*"                   >
  | < DIVINT        : "//"                  >
  | < DIV           : "/"                   >
  | < POW           : "**"                  >
  | < MOD           : "%"                   >

  | < LPAREN        : "("                   >
  | < RPAREN        : ")"                   >
  | < SEMICOLON     : ";"                   >
  | < COMMA         : ","                   >
  | < LBRACE        : "{"                   >
  | < RBRACE        : "}"                   >

  | < ASSIGN        : "="                   >

  | < E             : "/i"                  >
  | < OU            : "ili"                 >
  | < DOT           : "."                   >
}

// =============================
// Gramática
// =============================

void Programa() : {}
{
    Vvod() <EOF>
}

void Vvod() : {}
{
    ListaDeDeclaracoes() ListaDeComandos()
}

void ListaDeDeclaracoes() : {}
{
    ( Declaracao() )*
}

void ListaDeComandos() : {}
{
    ( Comando() )*
}

void Declaracao() : {}
{
      TipoEspecificador() Identificador() <SEMICOLON>
    | TipoEspecificador() Identificador() <ASSIGN> Expressao() <SEMICOLON>
}

void OpcionalInicializacao() : {}
{
    [ <ASSIGN> Expressao() ]
}

void TipoEspecificador() : {}
{
      <VOID>
    | <INT>
    | <FLOAT>
    | <STRING_TYPE>
}

void Comando() : {}
{
      Condicional()
    | Iteracao()
    | FraseFinalizada()
    | Vyvod()
}

void Condicional() : {}
{
      <IF> <LPAREN> Frase() <RPAREN> <LBRACE> ListaDeComandos() <RBRACE>
    | <IF> <LPAREN> Frase() <RPAREN> <LBRACE> ListaDeComandos() <RBRACE> <ELSE> <LBRACE> ListaDeComandos() <RBRACE>
    | <ELSE> <LBRACE> ListaDeComandos() <RBRACE>
}

void Iteracao() : {}
{
      <WHILE> <LPAREN> Frase() <RPAREN> <LBRACE> ListaDeComandos() <RBRACE>
    | <FOR> <LPAREN> Frase() <SEMICOLON> Frase() <SEMICOLON> Frase() <RPAREN> <LBRACE> ListaDeComandos() <RBRACE>
}

void FraseFinalizada() : {}
{
      Frase() <SEMICOLON>
    | Frase()
    {
        System.out.println("Meu camarada Russo, um programa sem ';' é como uma vodka pela metade, não acabou.");
        while (getToken(1).kind != SEMICOLON &&
               getToken(1).kind != RBRACE &&
               getToken(1).kind != 0) {
            getNextToken();
        }
        if (getToken(1).kind == SEMICOLON) {
            getNextToken();
        }
    }
}

void Frase() : {}
{
      Atribuicao()
    | Identificador()
    | Expressao()
    | <STRING_VALUE>
}

void Atribuicao() : {}
{
      Identificador() <ASSIGN> Expressao()
    | Identificador() OperadorIncdec()
}

void Expressao() : {}
{
    Termo() ( OperadorBinario() Termo() )*
}

void Termo() : {}
{
      Identificador()
    | Numero()
    | <STRING_VALUE>
    | <LPAREN> Expressao() <RPAREN>
}

void OperadorBinario() : {}
{
      <PLUS>
    | <MINUS>
    | <MULT>
    | <DIV>
    | <MOD>
    | <POW>
    | <E>
    | <OU>
}

void Identificador() : {}
{
    <IDENTIFIER>
}

void Numero () : {}
{
    <NUMBER>
}

void OperadorIncdec () : {}
{
      <INC>
    | <DEC>
}

void Vyvod () : {}
{
    <PRINT> <LPAREN> ( <IDENTIFIER> | <NUMBER> | <STRING_VALUE> ) <RPAREN> <SEMICOLON>
}

void Funktsyia() : {}
{
    Identificador() <LPAREN> ( <IDENTIFIER> ( <COMMA> <IDENTIFIER> )* )? <RPAREN> <LBRACE> ListaDeComandos() <RBRACE>
}

void Pusto () : {}
{
    Funktsyia()
}
